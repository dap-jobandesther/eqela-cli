
/*
 * This file is part of Eqela CLI
 * Copyright (c) 2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is ConsoleApplicationMain:

import capex.console
import capex.text
import capex.web

var script as File
var function as string
var functionParams as vector<string>
var installs = new vector<string>
var executeParams = new vector<string>
var cacheDir as File
var toolRepos = new vector<string>
var libRepos = new vector<string>
var mode = "script"
var hasParams = false
var forceUpdateTools = false
var forceUpdateLibraries = false
var customLibraryPaths as map<string,File>
var customToolPaths as map<string,File>

func initialize override as bool
{
	foreach arg in args {
		if mode == "execute" {
			executeParams += arg.getComplete()
			hasParams = true
			continue
		}
		else if arg.isFlag("update-libs") || arg.isFlag("ul") {
			forceUpdateLibraries = true
		}
		else if arg.isFlag("update-tools") || arg.isFlag("ut") {
			forceUpdateTools = true
		}
		else if arg.isFlag("update-all") || arg.isFlag("ua") {
			forceUpdateLibraries = true
			forceUpdateTools = true
		}
		else if arg.isOption("tools") {
			toolRepos += arg.value
		}
		else if arg.isOption("libs") {
			libRepos += arg.value
		}
		else if arg.isOption("cachedir") {
			cacheDir = File.forPath(arg.value)
		}
		else if arg.isFlag("script") || arg.isFlag("s") {
			mode = "script"
		}
		else if arg.isFlag("install") || arg.isFlag("i") {
			mode = "install"
		}
		else if arg.isFlag("execute") || arg.isFlag("x") {
			mode = "execute"
		}
		else if arg.isOption() && String.startsWith(arg.key, "L") {
			if not customLibraryPaths:
				customLibraryPaths = new map<string,File>
			customLibraryPaths[String.getSubString(arg.key, 1)] = File.forPath(arg.value)
		}
		else if arg.isOption() && String.startsWith(arg.key, "T") {
			if not customToolPaths:
				customToolPaths = new map<string,File>
			customToolPaths[String.getSubString(arg.key, 1)] = File.forPath(arg.value)
		}
		else if arg.isParameter() {
			if mode == "script" {
				if script == null {
					script = File.forPath(arg.parameter)
				}
				else if function == null {
					function = arg.parameter
				}
				else {
					if not functionParams:
						functionParams = new vector<string>
					functionParams += arg.parameter
				}
			}
			else if mode == "install" {
				installs += arg.parameter
			}
			else {
				Log.error(ctx, "Encountered a parameter in unsupported mode: `" .. mode .. "'")
				return false
			}
			hasParams = true
		}
		else {
			arg.reportAsUnsupported(ctx)
			return false
		}
	}
	return true
}

func printUsage
{
	var info = UsageInfo.forCommand("eqela execute")
	info.addOption("tools", "url", "Add a tool repository URL")
	info.addOption("cachedir", "directory", "Specify a cache directory location")
	info.addOption("L<path>", "directory", "Specify a custom library path")
	info.addOption("T<path>", "directory", "Specify a custom tool path")
	info.addFlag("script | -s", "Treat the following parameters a script / function")
	info.addFlag("install | -i", "Treat the following parameters as packages to install")
	info.addFlag("execute | -x", "Treat the rest of the command line as a command to execute")
	info.addParameter("parameter/s", "Script to execute, package to install or command to execute, depending on other flags")
	stdout.println(info.toString())
}

func execute override as bool
{
	if hasParams == false {
		ConsoleApplication.PRINT_HEADER(stdout, null)
		printUsage()
		return true
	}
	var exc = new ExecutionContext()
	exc.setForceUpdateLibraries(forceUpdateLibraries)
	exc.setForceUpdateTools(forceUpdateTools)
	exc.setCtx(ctx)
	exc.setCustomLibraryPaths(customLibraryPaths)
	exc.setCustomToolPaths(customToolPaths)
	var cc = cacheDir
	if not cc:
		cc = Environment.getApplicationDataDirectory("eqela").entry("qx").entry("cache")
	exc.setCacheDirectory(cc)
	if Vector.getSize(toolRepos) < 1:
		toolRepos += "http://qx.eqela.com"
	if Vector.getSize(libRepos) < 1 {
		libRepos += "http://qx.eqela.com"
		libRepos += "github"
	}
	var webClient = NativeWebClient.instance()
	if not webClient:
		Log.warning(ctx, "Failed to create a web client")
	foreach repo in toolRepos {
		var rr = assert PackageRepository.forUrl(repo, webClient):
			Log.error(ctx, "Invalid tool repository url: `" .. repo .. "'")
		exc.addToToolRepositories(rr)
	}
	foreach repo in libRepos {
		var rr = assert PackageRepository.forUrl(repo, webClient):
			Log.error(ctx, "Invalid lib repository url: `" .. repo .. "'")
		exc.addToLibraryRepositories(rr)
	}
	foreach install in installs {
		try {
			exc.installTool(PackageDescription.forString(install))
		}
		catch(e as Exception) {
			Log.error(ctx, String.asString(e))
			return false
		}
	}
	if script {
		Log.debug(ctx, "Reading script: `" .. script.getPath() .. "'")
		var code = assert ScriptReader.readFile(ctx, script):
			Log.error(ctx, "Failed to read script: `" .. script.getPath() .. "'")
		exc.executeScript(code, function, functionParams)
	}
	if Vector.getSize(executeParams) > 0 {
		Log.error(ctx, "Execute: Not implemented")
		return false
	}
	return true
}
