
/*
 * This file is part of Eqela CLI
 * Copyright (c) 2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is PackageRepository:

import capex.web

func forWebClient(webClient as WebClient) static as this
{
	var v = new this()
	v.setWebClient(webClient)
	return v
}

prop webClient as WebClient

func toUrl(desc as PackageDescription) private as string
{
	assert desc
	return "https://github.com/" .. desc.getVendor() .. "/" .. desc.getName() .. "/archive/" .. desc.getVersion() .. ".zip"
}

func getRepositoryName override as string:
	return "github"

func hasInstaller(ctx as LoggingContext, desc as PackageDescription) override as bool
{
	assert desc
	assert webClient
	var v = false
	var url = toUrl(desc)
	Log.status(ctx, "Checking for package availability: `" .. url .. "'..")
	Log.debug(ctx, "Checking URL `" .. url .. "'..")
	webClient.query("HEAD", url, null, null, func(status as string, headers as KeyValueList<string,string>, body as buffer) {
		Log.debug(ctx, "Received status=`" .. status .."', content: `" .. String.forUTF8Buffer(body) .. "'")
		if status == "200":
			v = true
	})
	Log.status(ctx, null)
	Log.debug(ctx, "hasInstaller `" .. desc.toString() .. "': " .. String.asString(v))
	return v
}

func getInstaller(ctx as LoggingContext, desc as PackageDescription, listener as function<void,long,long>) override as File
{
	assert desc
	assert webClient
	var v as File
	var url = toUrl(desc)
	Log.status(ctx, "Downloading package: `" .. url .. "'..")
	Log.debug(ctx, "Retrieving URL `" .. url .. "'..")
	webClient.query("GET", url, null, null, func(status as string, headers as KeyValueList<string,string>, body as buffer) {
		assert status == "200":
			Log.error(ctx, "Received HTTP status " .. status)
		assert body:
			Log.error(ctx, "Failed to receive content")
		var ff = TemporaryFile.create()
		assert ff.setContentsBuffer(body):
			Log.error(ctx, "Failed to write temporary file: `" .. ff.getPath() .. "'")
		v = ff
	})
	Log.status(ctx, null)
	if v {
		Log.debug(ctx, "Downloaded temporary file for package `" .. desc.toString() .. "': `" .. v.getPath() .. "'")
	}
	else {
		Log.debug(ctx, "Failed to download package installer: `" .. desc.toString() .. "'")
	}
	return v
}

func releaseInstaller(ctx as LoggingContext, file as File) override
{
	assert file
	Log.debug(ctx, "Removing temporary file: `" .. file.getPath() .. "'")
	file.remove()
}
